#encoding: utf-8
module Cielo
  class Transaction

    attr_reader :numero_afiliacao
    attr_reader :chave_acesso

    def initialize numero_afiliacao = Cielo.numero_afiliacao, chave_acesso = Cielo.chave_acesso
      @numero_afiliacao = numero_afiliacao
      @chave_acesso = chave_acesso
      @connection = Cielo::Connection.new @numero_afiliacao, @chave_acesso
    end
<<<<<<< HEAD
    def create!(parameters={})
      analysis_parameters(parameters)
      message = xml_builder("requisicao-transacao") do |xml|
        if parameters[:numero_cartao]
          xml.tag!("dados-portador") do
            xml.tag!(:numero, parameters[:numero_cartao].to_s)
            xml.tag!(:validade, parameters[:validade].to_s)
            [:indicador, :"codigo-seguranca"].each do |key|
              xml.tag!(key.to_s, parameters[key].to_s)
            end
            xml.tag!(:"nome-portador", parameters[:"nome-portador"].to_s) if parameters[:"nome-portador"].to_s
          end
        end
        xml.tag!("dados-pedido") do
          [:numero, :valor, :moeda, :"data-hora", :descricao, :idioma, :"soft-descriptor"].each do |key|
            xml.tag!(key.to_s, parameters[key].to_s)
          end
        end
        xml.tag!("forma-pagamento") do
          [:bandeira, :produto, :parcelas].each do |key|
            xml.tag!(key.to_s, parameters[key].to_s)
          end
        end
        xml.tag!("url-retorno", parameters[:"url-retorno"]).to_s if parameters[:"url-retorno"]
        xml.autorizar parameters[:autorizar].to_s
        xml.capturar parameters[:capturar].to_s
        xml.tag!("campo-livre", parameters[:"campo-livre"]).to_s if parameters[:"campo-livre"]
        xml.tag!("bin", parameters[:bin]).to_s if parameters[:bin]
=======

    def create!(parameters = {}, buy_page = :cielo)
      if buy_page == :store
        store_page_create!(parameters)
      else
        cielo_page_create!(parameters)
      end
    end

    def store_page_create!(parameters={})
      analysis_parameters(parameters, :buy_page_store)
      message = @connection.xml_builder('requisicao-transacao') do |xml|
        xml.tag!("dados-portador") do
          if parameters[:token].present?
            xml.tag!('token', parameters[:token])
          else
            xml.tag!('numero', parameters[:cartao_numero])
            xml.tag!('validade', parameters[:cartao_validade])
            xml.tag!('indicador', parameters[:cartao_indicador])
            xml.tag!('codigo-seguranca', parameters[:cartao_seguranca])
            xml.tag!('nome-portador', parameters[:cartao_portador])
            xml.tag!('token', '')
          end
        end
        default_transaction_xml(xml, parameters)
      end

      @connection.make_request! message
    end

    def cielo_page_create!(parameters={})
      analysis_parameters(parameters, :buy_page_cielo)
      message = @connection.xml_builder("requisicao-transacao") do |xml|
        default_transaction_xml(xml, parameters)
>>>>>>> a978039c7df6dfefe2655095b18598f0a9ae0264
      end
      @connection.make_request! message
    end

    def verify!(cielo_tid)
      return nil unless cielo_tid
      message = @connection.xml_builder("requisicao-consulta", :before) do |xml|
        xml.tid "#{cielo_tid}"
      end

      @connection.make_request! message
    end

    def catch!(cielo_tid)
      return nil unless cielo_tid
      message = @connection.xml_builder("requisicao-captura", :before) do |xml|
        xml.tid "#{cielo_tid}"
      end
      @connection.make_request! message
    end

    def authorize!(cielo_tid)
      return nil unless cielo_tid
      message = @connection.xml_builder("requisicao-autorizacao-tid", :before) do |xml|
        xml.tid "#{cielo_tid}"
      end
      @connection.make_request! message
    end

    def cancel!(cielo_tid)
      return nil unless cielo_tid
      message = @connection.xml_builder("requisicao-cancelamento", :before) do |xml|
        xml.tid "#{cielo_tid}"
      end
      @connection.make_request! message
    end

    private
<<<<<<< HEAD
    def analysis_parameters(parameters={})
      [:numero, :valor, :bandeira].each do |parameter|
        raise Cielo::MissingArgumentError, "Required parameter #{parameter} not found" unless parameters[parameter]
      end
      parameters.merge!(:validade => ["%04d" % (parameters[:validade_ano].to_i.remainder(100) + 2000), "%02d" % parameters[:validade_mes].to_i].join("")) if parameters[:validade_ano]
      parameters.merge!(:indicador => "1") unless parameters[:indicador]
=======
    def default_transaction_xml(xml, parameters)
      xml.tag!("dados-pedido") do
        [:numero, :valor, :moeda, :"data-hora", :idioma].each do |key|
          xml.tag!(key.to_s, parameters[key].to_s)
        end
      end
      xml.tag!("forma-pagamento") do
        [:bandeira, :produto, :parcelas].each do |key|
          xml.tag!(key.to_s, parameters[key].to_s)
        end
      end
      xml.tag!("url-retorno", parameters[:"url-retorno"])
      xml.autorizar parameters[:autorizar].to_s
      xml.capturar parameters[:capturar].to_s
      xml.tag!("gerar-token", parameters[:"gerar-token"])
    end

    def analysis_parameters(parameters={}, buy_page = :buy_page_cielo)
      to_analyze = [:numero, :valor, :bandeira, :"url-retorno"]

      if buy_page == :buy_page_store
        if parameters[:token].present?
          to_analyze.concat([:token])
        else
          to_analyze.concat([:cartao_numero, :cartao_validade, :cartao_seguranca, :cartao_portador])
        end
      end

      to_analyze.each do |parameter|
        raise Cielo::MissingArgumentError, "Required parameter #{parameter} not found" unless parameters[parameter]
      end

>>>>>>> a978039c7df6dfefe2655095b18598f0a9ae0264
      parameters.merge!(:moeda => "986") unless parameters[:moeda]
      parameters.merge!(:"data-hora" => Time.now.strftime("%Y-%m-%dT%H:%M:%S")) unless parameters[:"data-hora"]
      parameters.merge!(:descricao => "") unless parameters[:descricao]
      parameters.merge!(:idioma => "PT") unless parameters[:idioma]
      parameters.merge!(:"soft-descriptor" => "") unless parameters[:"soft-descriptor"]
      parameters.merge!(:produto => "1") unless parameters[:produto]
      parameters.merge!(:parcelas => "1") unless parameters[:parcelas]
      parameters.merge!(:autorizar => "2") unless parameters[:autorizar]
      parameters.merge!(:capturar => "true") unless parameters[:capturar]
      parameters.merge!(:"url-retorno" => Cielo.return_path) unless parameters[:"url-retorno"]
<<<<<<< HEAD
      parameters.merge!(:"campo-livre" => "") unless parameters[:"campo-livre"]
      parameters.merge!(:"bin" => parameters[:numero_cartao][0..5]) if parameters[:numero_cartao]
      parameters
    end
    
    def xml_builder(group_name, target=:after, &block)
      xml = Builder::XmlMarkup.new
      xml.instruct! :xml, :version=>"1.0", :encoding=>"ISO-8859-1"
      xml.tag!(group_name, :id => "#{Time.now.to_i}", :versao => "1.2.0") do
        block.call(xml) if target == :before
        xml.tag!("dados-ec") do
          xml.numero Cielo.numero_afiliacao
          xml.chave Cielo.chave_acesso
        end
        block.call(xml) if target == :after
      end
      xml
    end
    
    def make_request!(message)
      params = { :mensagem => message.target! }
      
      result = @connection.request! params
      
      parse_response(result)
    end
    
    def parse_response(response)
      if ["100 Continue"].include?(response.status)
        document = REXML::Document.new(response.body_str)
        parse_elements(document.elements)
      else
        {:erro => { :codigo => "000", :mensagem => "ImpossÃ­vel contactar o servidor"}}
      end
    end
    def parse_elements(elements)
      map={}
      elements.each do |element|
        element_map = {}
        element_map = element.text if element.elements.empty? && element.attributes.empty?
        element_map.merge!("value" => element.text) if element.elements.empty? && !element.attributes.empty?
        element_map.merge!(parse_elements(element.elements)) unless element.elements.empty?
        map.merge!(element.name => element_map)
      end
      map.symbolize_keys
    end
=======
      parameters.merge!(:cartao_indicador => '1') unless parameters[:cartao_indicador] && buy_page == :buy_page_store
      parameters.merge!(:"gerar-token" => false) unless parameters[:"gerar-token"]

      parameters
    end


>>>>>>> a978039c7df6dfefe2655095b18598f0a9ae0264
  end
end
